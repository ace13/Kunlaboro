#ifndef _KUNLABORO_DEFINES_HPP
#define _KUNLABORO_DEFINES_HPP

#cmakedefine Kunlaboro_BOOST

#ifdef Kunlaboro_BOOST
#include <boost/any.hpp>
#endif
#include <string>
#include <deque>
#include <vector>
#include <functional>
#include <unordered_map>

namespace Kunlaboro
{
    class Component;
    struct Message;

    /// A Globally Unique IDentifier.
    typedef unsigned int GUID;

    /// A ComponentId.
    typedef GUID ComponentId;
    /// A EntityId.
    typedef GUID EntityId;
    /// A RequestId.
    typedef GUID RequestId;

    /// The Payload type to use.
#ifdef Kunlaboro_BOOST
    typedef boost::any Payload;
#else
    typedef const void* Payload;
#endif

    /// The MessageFunction.
    typedef std::function<void(Message&)> MessageFunction;
    /// The factory function for a Component.
    typedef std::function<Component*()> ComponentFactory;

    /// A ComponentMap to store and access Component objects against their names.
    typedef std::unordered_map<std::string, std::deque<Component*> > ComponentMap;

    /// A NameToIdMap to store GUID values of strings.
    typedef std::unordered_map<std::string, GUID> NameToIdMap;
    /// A IdToNameMap to store the string value that a GUID points to.
    typedef std::unordered_map<GUID, std::string> IdToNameMap;

    /// The type of a message.
    enum MessageType
    {
        Type_Create,  ///< A Component was created/added.
        Type_Destroy, ///< A Component was destroyed/removed.
        Type_Message  ///< A Message was sent.
    };

    /// The reason a message exists.
    enum MessageReason
    {
        Reason_Message,      ///< A Message was sent.
        Reason_Component,    ///< A Component did something.
        Reason_AllComponents ///< All Components were requested.
    };

    /// A Request of a Component.
    struct ComponentRequested
    {
        MessageReason reason; ///< The reason of the request.
        std::string name;     ///< The name of the Component owning request.
    };

    /// A Registered callback for a Component.
    struct ComponentRegistered
    {
        Component* component;     ///< The Component the registered a request.
        MessageFunction callback; ///< The callback in question.
        bool required;            ///< Is this a requirement and not a request.
        int priority;             ///< The priority of this request.
    };

    /// A map of requests
    typedef std::unordered_map<GUID, std::deque<ComponentRegistered> > RequestMap;

    /// A message that is sent through the EntitySystem.
    struct Message {
        MessageType type;  ///< The type of the message.
        Component* sender; ///< The sender of the message, can be NULL.
        Payload payload;   ///< The payload of the message, can be empty.
        bool handled;      ///< Has the message been handled?
        Message(MessageType t = Type_Message, Component *c = nullptr, Payload p = nullptr) : type(t), sender(c), payload(p), handled(false) {} ///< Create an empty message of the specified type.

        /// Helper function to handle a message.
        template<typename T>
#ifdef Kunlaboro_BOOST
        void handle(const T& ret);
#else
        void handle(const T* ret);
#endif
    };
}

template<typename T>
#ifdef Kunlaboro_BOOST
void Kunlaboro::Message::handle(const T& ret)
#else
void Kunlaboro::Message::handle(const T* ret)
#endif
{
    payload = ret;
    handled = true;
}

#endif
